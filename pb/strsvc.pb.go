// Code generated by protoc-gen-go. DO NOT EDIT.
// source: strsvc.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UppercaseRequest struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UppercaseRequest) Reset()         { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()    {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c9da31ff25ad75, []int{0}
}

func (m *UppercaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UppercaseRequest.Unmarshal(m, b)
}
func (m *UppercaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UppercaseRequest.Marshal(b, m, deterministic)
}
func (m *UppercaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UppercaseRequest.Merge(m, src)
}
func (m *UppercaseRequest) XXX_Size() int {
	return xxx_messageInfo_UppercaseRequest.Size(m)
}
func (m *UppercaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UppercaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UppercaseRequest proto.InternalMessageInfo

func (m *UppercaseRequest) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type UppercaseReply struct {
	V                    string   `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UppercaseReply) Reset()         { *m = UppercaseReply{} }
func (m *UppercaseReply) String() string { return proto.CompactTextString(m) }
func (*UppercaseReply) ProtoMessage()    {}
func (*UppercaseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c9da31ff25ad75, []int{1}
}

func (m *UppercaseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UppercaseReply.Unmarshal(m, b)
}
func (m *UppercaseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UppercaseReply.Marshal(b, m, deterministic)
}
func (m *UppercaseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UppercaseReply.Merge(m, src)
}
func (m *UppercaseReply) XXX_Size() int {
	return xxx_messageInfo_UppercaseReply.Size(m)
}
func (m *UppercaseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UppercaseReply.DiscardUnknown(m)
}

var xxx_messageInfo_UppercaseReply proto.InternalMessageInfo

func (m *UppercaseReply) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *UppercaseReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "pb.UppercaseRequest")
	proto.RegisterType((*UppercaseReply)(nil), "pb.UppercaseReply")
}

func init() { proto.RegisterFile("strsvc.proto", fileDescriptor_c5c9da31ff25ad75) }

var fileDescriptor_c5c9da31ff25ad75 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x2a,
	0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe0, 0x12,
	0x08, 0x2d, 0x28, 0x48, 0x2d, 0x4a, 0x4e, 0x2c, 0x4e, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0xe2, 0xe1, 0x62, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2c, 0x56, 0x32,
	0xe0, 0xe2, 0x43, 0x52, 0x51, 0x90, 0x53, 0x09, 0x92, 0x2f, 0x83, 0xc9, 0x97, 0x09, 0x09, 0x70,
	0x31, 0xa7, 0x16, 0x15, 0x49, 0x30, 0x81, 0xf9, 0x20, 0xa6, 0x91, 0x1d, 0x17, 0x73, 0x70, 0x49,
	0x91, 0x90, 0x39, 0x17, 0x27, 0x5c, 0xa3, 0x90, 0x88, 0x5e, 0x41, 0x92, 0x1e, 0xba, 0x4d, 0x52,
	0x42, 0x68, 0xa2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xe7, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0x35, 0xd1, 0xea, 0xae, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StrClient is the client API for Str service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StrClient interface {
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseReply, error)
}

type strClient struct {
	cc *grpc.ClientConn
}

func NewStrClient(cc *grpc.ClientConn) StrClient {
	return &strClient{cc}
}

func (c *strClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseReply, error) {
	out := new(UppercaseReply)
	err := c.cc.Invoke(ctx, "/pb.Str/Uppercase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrServer is the server API for Str service.
type StrServer interface {
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseReply, error)
}

// UnimplementedStrServer can be embedded to have forward compatible implementations.
type UnimplementedStrServer struct {
}

func (*UnimplementedStrServer) Uppercase(ctx context.Context, req *UppercaseRequest) (*UppercaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uppercase not implemented")
}

func RegisterStrServer(s *grpc.Server, srv StrServer) {
	s.RegisterService(&_Str_serviceDesc, srv)
}

func _Str_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Str/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Str_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Str",
	HandlerType: (*StrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _Str_Uppercase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strsvc.proto",
}
